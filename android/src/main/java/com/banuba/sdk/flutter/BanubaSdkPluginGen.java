// Autogenerated from Pigeon (v4.2.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.banuba.sdk.flutter;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;

import io.agora.rtc2.RtcEngine;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/**Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class BanubaSdkPluginGen {

  public enum SeverityLevel {
    DEBUG(0),
    INFO(1),
    WARNING(2),
    ERROR(3);

    private final int index;
    private SeverityLevel(final int index) {
      this.index = index;
    }
  }
  /**
   * An entry point to Banuba SDK
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface BanubaSdkManager {
    /**
     * Intialize common banuba SDK resources. This must be called before any
     * other call. Counterpart `deinitialize` exists.
     *
     * parameter resourcePath: paths to cutom resources folders
     * parameter clientTokenString: client token
     * parameter logLevel: log level
     */
    void initialize(@NonNull List<String> resourcePath, @NonNull String clientTokenString, @NonNull SeverityLevel logLevel);
    void initializeExtension(RtcEngine resourcePathArgExtension, String clientTokenStringArg, SeverityLevel logLevelArg);
//    void initialize(
//            @NonNull io.agora.rtc2.RtcEngine resourcePath,
//            @NonNull String clientTokenString,
//            @NonNull SeverityLevel logLevel
//    );

    /** Release common Banuba SDK resources. */
    void deinitialize();
    void attachWidget(@NonNull Long banubaId);
    void openCamera();
    void startPlayer();
    void stopPlayer();
    void loadEffect(@NonNull String path);
    void evalJs(@NonNull String script);

    /** The codec used by BanubaSdkManager. */
    static MessageCodec<Object> getCodec() {
      return       new StandardMessageCodec();    }
    /**Sets up an instance of `BanubaSdkManager` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, BanubaSdkManager api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.initialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              List<String> resourcePathArg = (List<String>)args.get(0);
              io.agora.rtc2.RtcEngine resourcePathArgExtension = (   io.agora.rtc2.RtcEngine)args.get(0);
              if (resourcePathArg == null) {
                throw new NullPointerException("resourcePathArg unexpectedly null.");
              }
              String clientTokenStringArg = (String)args.get(1);
              if (clientTokenStringArg == null) {
                throw new NullPointerException("clientTokenStringArg unexpectedly null.");
              }
              SeverityLevel logLevelArg = args.get(2) == null ? null : SeverityLevel.values()[(int)args.get(2)];
              if (logLevelArg == null) {
                throw new NullPointerException("logLevelArg unexpectedly null.");
              }
              api.initialize(resourcePathArg, clientTokenStringArg, logLevelArg);
              api.initializeExtension(resourcePathArgExtension, clientTokenStringArg, logLevelArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.deinitialize", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.deinitialize();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.attachWidget", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              Number banubaIdArg = (Number)args.get(0);
              if (banubaIdArg == null) {
                throw new NullPointerException("banubaIdArg unexpectedly null.");
              }
              api.attachWidget((banubaIdArg == null) ? null : banubaIdArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.openCamera", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.openCamera();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.startPlayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.startPlayer();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.stopPlayer", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              api.stopPlayer();
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.loadEffect", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String pathArg = (String)args.get(0);
              if (pathArg == null) {
                throw new NullPointerException("pathArg unexpectedly null.");
              }
              api.loadEffect(pathArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.BanubaSdkManager.evalJs", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              assert args != null;
              String scriptArg = (String)args.get(0);
              if (scriptArg == null) {
                throw new NullPointerException("scriptArg unexpectedly null.");
              }
              api.evalJs(scriptArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }


  }
  @NonNull private static Map<String, Object> wrapError(@NonNull Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
