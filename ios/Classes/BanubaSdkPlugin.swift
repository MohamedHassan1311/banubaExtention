// Autogenerated from Pigeon (v4.2.10), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif


/// Generated class from Pigeon.

enum SeverityLevel: Int {
  case debug = 0
  case info = 1
  case warning = 2
  case error = 3
}
/// An entry point to Banuba SDK
///
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol BanubaSdkManager {
  /// Intialize common banuba SDK resources. This must be called before any
  /// other call. Counterpart `deinitialize` exists.
  ///
  /// parameter resourcePath: paths to cutom resources folders
  /// parameter clientTokenString: client token
  /// parameter logLevel: log level
  func initialize(resourcePath: [String], clientTokenString: String, logLevel: SeverityLevel)
  /// Release common Banuba SDK resources.
  func deinitialize()
  func attachWidget(banubaId: Int32)
  func openCamera()
  func startPlayer()
  func stopPlayer()
  func loadEffect(path: String)
  func evalJs(script: String)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class BanubaSdkManagerSetup {
  /// The codec used by BanubaSdkManager.
  /// Sets up an instance of `BanubaSdkManager` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: BanubaSdkManager?) {
    /// Intialize common banuba SDK resources. This must be called before any
    /// other call. Counterpart `deinitialize` exists.
    ///
    /// parameter resourcePath: paths to cutom resources folders
    /// parameter clientTokenString: client token
    /// parameter logLevel: log level
    let initializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.initialize", binaryMessenger: binaryMessenger)
    if let api = api {
      initializeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let resourcePathArg = args[0] as! [String]
        let clientTokenStringArg = args[1] as! String
        let logLevelArg = SeverityLevel(rawValue: args[2] as! Int)!
        api.initialize(resourcePath: resourcePathArg, clientTokenString: clientTokenStringArg, logLevel: logLevelArg)
        reply(wrapResult(nil))
      }
    } else {
      initializeChannel.setMessageHandler(nil)
    }
    /// Release common Banuba SDK resources.
    let deinitializeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.deinitialize", binaryMessenger: binaryMessenger)
    if let api = api {
      deinitializeChannel.setMessageHandler { _, reply in
        api.deinitialize()
        reply(wrapResult(nil))
      }
    } else {
      deinitializeChannel.setMessageHandler(nil)
    }
    let attachWidgetChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.attachWidget", binaryMessenger: binaryMessenger)
    if let api = api {
      attachWidgetChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let banubaIdArg = args[0] as! Int32
        api.attachWidget(banubaId: banubaIdArg)
        reply(wrapResult(nil))
      }
    } else {
      attachWidgetChannel.setMessageHandler(nil)
    }
    let openCameraChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.openCamera", binaryMessenger: binaryMessenger)
    if let api = api {
      openCameraChannel.setMessageHandler { _, reply in
        api.openCamera()
        reply(wrapResult(nil))
      }
    } else {
      openCameraChannel.setMessageHandler(nil)
    }
    let startPlayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.startPlayer", binaryMessenger: binaryMessenger)
    if let api = api {
      startPlayerChannel.setMessageHandler { _, reply in
        api.startPlayer()
        reply(wrapResult(nil))
      }
    } else {
      startPlayerChannel.setMessageHandler(nil)
    }
    let stopPlayerChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.stopPlayer", binaryMessenger: binaryMessenger)
    if let api = api {
      stopPlayerChannel.setMessageHandler { _, reply in
        api.stopPlayer()
        reply(wrapResult(nil))
      }
    } else {
      stopPlayerChannel.setMessageHandler(nil)
    }
    let loadEffectChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.loadEffect", binaryMessenger: binaryMessenger)
    if let api = api {
      loadEffectChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let pathArg = args[0] as! String
        api.loadEffect(path: pathArg)
        reply(wrapResult(nil))
      }
    } else {
      loadEffectChannel.setMessageHandler(nil)
    }
    let evalJsChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.BanubaSdkManager.evalJs", binaryMessenger: binaryMessenger)
    if let api = api {
      evalJsChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let scriptArg = args[0] as! String
        api.evalJs(script: scriptArg)
        reply(wrapResult(nil))
      }
    } else {
      evalJsChannel.setMessageHandler(nil)
    }
  }
}

private func wrapResult(_ result: Any?) -> [String: Any?] {
  return ["result": result]
}

private func wrapError(_ error: FlutterError) -> [String: Any?] {
  return [
    "error": [
      "code": error.code,
      "message": error.message,
      "details": error.details
    ]
  ]
}
